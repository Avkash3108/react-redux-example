/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/

/*
HTML escaping is the same as React's
(on purpose.) Therefore, it has the following Copyright and Licensing:

Copyright 2013-2014, Facebook, Inc.
All rights reserved.

This source code is licensed under the BSD-style license found in the LICENSE
file in the root directory of React's source tree.
*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* */

/* 0 */

/* 1 */

/* 10 */

/* 100 */

/* 101 */

/* 102 */

/* 103 */

/* 104 */

/* 105 */

/* 106 */

/* 107 */

/* 108 */

/* 109 */

/* 11 */

/* 110 */

/* 111 */

/* 112 */

/* 113 */

/* 114 */

/* 115 */

/* 116 */

/* 117 */

/* 118 */

/* 119 */

/* 12 */

/* 120 */

/* 121 */

/* 122 */

/* 123 */

/* 124 */

/* 125 */

/* 126 */

/* 127 */

/* 128 */

/* 129 */

/* 13 */

/* 130 */

/* 131 */

/* 132 */

/* 133 */

/* 134 */

/* 135 */

/* 136 */

/* 137 */

/* 138 */

/* 139 */

/* 14 */

/* 140 */

/* 141 */

/* 142 */

/* 143 */

/* 144 */

/* 145 */

/* 146 */

/* 147 */

/* 148 */

/* 149 */

/* 15 */

/* 150 */

/* 151 */

/* 152 */

/* 153 */

/* 154 */

/* 155 */

/* 156 */

/* 157 */

/* 158 */

/* 159 */

/* 16 */

/* 160 */

/* 161 */

/* 162 */

/* 163 */

/* 164 */

/* 165 */

/* 166 */

/* 167 */

/* 168 */

/* 169 */

/* 17 */

/* 170 */

/* 171 */

/* 172 */

/* 173 */

/* 174 */

/* 175 */

/* 176 */

/* 177 */

/* 178 */

/* 179 */

/* 18 */

/* 180 */

/* 181 */

/* 182 */

/* 183 */

/* 184 */

/* 185 */

/* 186 */

/* 187 */

/* 188 */

/* 189 */

/* 19 */

/* 190 */

/* 191 */

/* 192 */

/* 193 */

/* 194 */

/* 195 */

/* 196 */

/* 2 */

/* 20 */

/* 21 */

/* 22 */

/* 23 */

/* 24 */

/* 25 */

/* 26 */

/* 27 */

/* 28 */

/* 29 */

/* 3 */

/* 30 */

/* 31 */

/* 32 */

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/* 37 */

/* 38 */

/* 39 */

/* 4 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/* 5 */

/* 50 */

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

/* 59 */

/* 6 */

/* 60 */

/* 61 */

/* 62 */

/* 63 */

/* 64 */

/* 65 */

/* 66 */

/* 67 */

/* 68 */

/* 69 */

/* 7 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

/* 75 */

/* 76 */

/* 77 */

/* 78 */

/* 79 */

/* 8 */

/* 80 */

/* 81 */

/* 82 */

/* 83 */

/* 84 */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/* 9 */

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* 95 */

/* 96 */

/* 97 */

/* 98 */

/* 99 */

/* Built-in method references for those with the same name as other `lodash` methods. */

/* Built-in method references that are verified to be native. */

/* FORMAT_ERROR */

/* INVALID_CONFIG */

/* INVALID_VALUE */

/* MISSING_DATA */

/* MISSING_INTL_API */

/* MISSING_TRANSLATION */

/* MISSING_VALUE */

/* Node.js helper references. */

/* UNSUPPORTED_FORMATTER */

/* WEBPACK VAR INJECTION */

/* binding */

/* dateTime */

/* eslint-disable no-return-assign */

/* eslint-disable no-unused-vars */

/* eslint-disable react/require-render-return */

/* eslint-enable react/no-deprecated */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* global define */

/* global navigator, parseFloat */

/* global window */

/* global window, document */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* istanbul ignore else: sanity check */

/* istanbul ignore if  */

/* istanbul ignore if: untestable with Karma */

/* istanbul ignore next  */

/* istanbul ignore next */

/* istanbul ignore next: sanity check */

/* istanbul ignore next: untestable with Karma */

/* literal */

/* number */

/* object */

/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

/*#__PURE__*/

/**
         * Update Sticky position.
         */

/**
         * Update the initial position, width, and height. It should update whenever children change.
         * @param {Object} options optional top and bottomBoundary new values
         */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
     * @return {object}
     * @optional
     */

/**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */

/**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */

/**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */

/**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */

/**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */

/**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */

/**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */

/**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */

/**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */

/**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */

/**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */

/**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */

/**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */

/**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */

/**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */

/**
     * Only possible within plural argument.
     * This is the `#` symbol that will be substituted with the count.
     */

/**
     * Raw text
     */

/**
     * Replacement for (deprecated) `componentWillMount`.
     *
     * @optional
     */

/**
     * Replacement for (deprecated) `componentWillReceiveProps`.
     *
     * @optional
     */

/**
     * Replacement for (deprecated) `componentWillUpdate`.
     *
     * @optional
     */

/**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */

/**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */

/**
     * This method is invoked after a component is instantiated and when it
     * receives new props. Return an object to update state in response to
     * prop changes. Return null to indicate no change to state.
     *
     * If an object is returned, its keys will be merged into the existing state.
     *
     * @return {object || null}
     * @optional
     */

/**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */

/**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */

/**
     * Variable w/ date format
     */

/**
     * Variable w/ number format
     */

/**
     * Variable w/ plural format
     */

/**
     * Variable w/ select format
     */

/**
     * Variable w/ time format
     */

/**
     * Variable w/o any format, e.g `var` in `this is a {var}`
     */

/**
     * XML-like tag
     */

/**
   * A <Router> is a high-level API for automatically setting up
   * a router that renders a <RouterContext> with all the props
   * it needs each time the URL changes.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */

/**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */

/**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */

/**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */

/**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */

/**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * If a prop switches from controlled to Uncontrolled
   * reset its value to the defaultValue
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */

/**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */

/**
   * Policies that describe methods in `ReactClassInterface`.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Registers the given hook function to run before leaving the given route.
   *
   * During a normal transition, the hook function receives the next location
   * as its only argument and can return either a prompt message (string) to show the user,
   * to make sure they want to leave the page; or `false`, to prevent the transition.
   * Any other return value will have no effect.
   *
   * During the beforeunload event (in browsers) the hook receives no arguments.
   * In this case it must return a prompt message to prevent the transition.
   *
   * Returns a function that may be used to unbind the listener.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * Runs all onChange hooks in the given array of routes in order
   * with onChange(prevState, nextState, replace, callback) and calls
   * callback(error, redirectInfo) when finished. The first hook
   * to use replace short-circuits the loop.
   *
   * If a hook needs to run asynchronously, it may use the callback
   * function. However, doing so will cause the transition to pause,
   * which could lead to a non-responsive UI if the hook is slow.
   */

/**
   * Runs all onEnter hooks in the given array of routes in order
   * with onEnter(nextState, replace, callback) and calls
   * callback(error, redirectInfo) when finished. The first hook
   * to use replace short-circuits the loop.
   *
   * If a hook needs to run asynchronously, it may use the callback
   * function. However, doing so will cause the transition to pause,
   * which could lead to a non-responsive UI if the hook is slow.
   */

/**
   * Runs all onLeave hooks in the given array of routes in order.
   */

/**
   * This is the API for stateful environments. As the location
   * changes, we update state and call the listener. We can also
   * gracefully handle errors and redirects.
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
 * @param {Bool} enabled A switch to enable or disable Sticky.
 * @param {String/Number} top A top offset px for Sticky. Could be a selector representing a node
 *        whose height should serve as the top offset.
 * @param {String/Number} bottomBoundary A bottom boundary px on document where Sticky will stop.
 *        Could be a selector representing a node whose bottom should serve as the bottom boudary.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * A <Link> is used to create an <a> element that links to a route.
 * When that route is active, the link gets the value of its
 * activeClassName prop.
 *
 * For example, assuming you have the following route:
 *
 *   <Route path="/posts/:postID" component={Post} />
 *
 * You could use the following component to link to that route:
 *
 *   <Link to={`/posts/${post.id}`} />
 */

/**
 * A <Redirect> is used to declare another URL path a client should
 * be sent to when they request a given URL.
 *
 * Redirects are placed alongside routes in the route configuration
 * and are traversed in the same manner.
 */

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */

/**
 * An `addEventListener` ponyfill, supports the `once` option
 */

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * Asynchronously fetches all components needed for the given router
 * state and calls callback(error, components) when finished.
 *
 * Note: This operation may finish synchronously if no routes have an
 * asynchronous getComponents method.
 */

/**
 * Asynchronously matches the given location to a set of routes and calls
 * callback(error, state) when finished. The state object will have the
 * following properties:
 *
 * - routes       An array of routes that matched, in hierarchical order
 * - params       An object of URL parameters
 *
 * Note: This operation may finish synchronously if no routes have an
 * asynchronous getChildRoutes method.
 */

/**
 * Attempts to match a pattern on the given pathname. Patterns may use
 * the following special characters:
 *
 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
 *                  captured string is considered a "param"
 * - ()             Wraps a segment of the URL that is optional
 * - *              Consumes (non-greedy) all characters up to the next
 *                  character in the pattern, or to the end of the URL if
 *                  there is none
 * - **             Consumes (greedy) all characters up to the next character
 *                  in the pattern, or to the end of the URL if there is none
 *
 *  The function calls callback(error, matched) when finished.
 * The return value is an object with the following properties:
 *
 * - remainingPathname
 * - paramNames
 * - paramValues
 */

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Connect a throttled event to a throttled main event, and return an event remover.
 * The number of connections to a throttled main event will be kept. If all throttled events
 * are removed, then remove throttled main event.
 * @method connectThrottle
 * @param {String} throttledEvent - A throttled event
 * @param {Function} cb - Callback function
 * @param {Object} ctx - The "this"
 * @param {String} throttledMainEvent - A throttled main event
 * @return {Object} An event remover
 */

/**
 * Connect to event, event start and event end.
 * @method connectContinuousEvent
 * @param {Object} target - The target of a main event, window or document.
 * @param {String} mainEvent - A browser event, like scroll or resize.
 * @param {String} event - A subscribe event.
 * @param {Object} eventOptions - An options pass to event listener
 */

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
 */

/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create intl formatters and populate cache
 * @param cache explicit cache to prevent leaking memory
 */

/**
 * Create intl object
 * @param config intl config
 * @param cache cache for formatter instances to prevent memory leak
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a `Ref` whose value is updated in an effect, ensuring the most recent
 * value is the one rendered with. Generally only required for Concurrent mode usage
 * where previous work in `render()` may be discarded befor being used.
 *
 * This is safe to access in an event handler.
 *
 * @param value The `Ref` value
 */

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates and returns a history object that uses HTML5's history API
 * (pushState, replaceState, and the popstate event) to manage history.
 * This is the recommended method of managing history in browsers because
 * it provides the cleanest URLs.
 *
 * Note: In browsers that do not support the HTML5 history API full
 * page reloads will be used to preserve clean URLs. You can force this
 * behavior using { forceRefresh: true } in options.
 */

/**
 * Creates and returns a routes object from the given ReactChildren. JSX
 * provides a convenient way to visualize how routes in the hierarchy are
 * nested.
 *
 *   import { Route, createRoutesFromReactChildren } from 'react-router'
 *
 *   const routes = createRoutesFromReactChildren(
 *     <Route component={App}>
 *       <Route path="home" component={Dashboard}/>
 *       <Route path="news" component={NewsFeed}/>
 *     </Route>
 *   )
 *
 * Note: This method is automatically used when you provide <Route> children
 * to a <Router> component.
 */

/**
 * Creates and returns an array of routes from the given object which
 * may be a JSX route, a plain object route, or an array of either.
 */

/**
 * Cross-browser addEventListener.
 * @method listen
 * @param {Object} target - The target to add event listener.
 * @param {String} eventType - The event type.
 * @param {Function} handler - The event handler.
 * @param {Object} handler - The options object that specifies
 * characteristics about the event listener.
 * @return {Object} The object to be able to remove the handler.
 */

/**
 * Extracts an object of params the given route cares about from
 * the given params object.
 */

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

/**
 * Indicates that navigation was caused by a call to history.push.
 */

/**
 * Indicates that navigation was caused by a call to history.replace.
 */

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */

/**
 * Parse Date time skeleton into Intl.DateTimeFormatOptions
 * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * @public
 * @param skeleton skeleton string
 */

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */

/**
 * Returns a version of the given pattern with params interpolated. Throws
 * if there is a dynamic segment of the pattern for which there is no param.
 */

/**
 * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
 * the change from prevState to nextState. We leave routes if either
 * 1) they are not in the next state or 2) they are in the next state
 * but their params have changed (i.e. /users/123 => /users/456).
 *
 * leaveRoutes are ordered starting at the leaf route of the tree
 * we're leaving up to the common parent route. enterRoutes are ordered
 * from the top of the tree we're entering down to the leaf route.
 *
 * changeRoutes are any routes that didn't leave or enter during
 * the transition.
 */

/**
 * Returns true if a <Link> to the given pathname/query combination is
 * currently active.
 */

/**
 * Returns true if all key/value pairs in the given query are
 * currently active.
 */

/**
 * Returns true if the current pathname matches the supplied one, net of
 * leading and trailing slash normalization. This is sufficient for an
 * indexOnly route match.
 */

/**
 * Returns true if the given pathname matches the active routes and params.
 */

/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} functions to chain
 * @returns {function|null}
 */

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

/**
 * Subscribe to UI events.
 * @method subscribe
 * @param {String} type - The type of event.
 * @param {Function} cb - The callback function.
 * @param {Object} options.context - The caller.
 * @param {Number} options.throttleRate - The amount of time for throttling.
 * @param {Boolean} options.useRAF - Use rAF for throttling if true.
 * @param {Object} options.eventOptions - Option to pass to event listener
 * @return {Object} The object with unsubscribe function.
 */

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */

/**
 * There are situations due to browser quirks or Bootstrap CSS where
 * an anchor tag is needed, when semantically a button tag is the
 * better choice. SafeAnchor ensures that when an anchor is used like a
 * button its accessible. It also emulates input `disabled` behavior for
 * links, which is usually desirable for Buttons, NavItems, DropdownItems, etc.
 */

/**
 * These actions correspond to the history API.
 * The associated routerMiddleware will capture these events before they get to
 * your reducer and reissue them as the matching function on your history.
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * This action type will be dispatched by the history actions below.
 * If you're writing a middleware to watch for navigation events, be sure to
 * look for actions of this type.
 */

/**
 * This action type will be dispatched when your history
 * receives a location change.
 */

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * This function synchronizes your history state with the Redux store.
 * Location changes flow from history to the store. An enhanced history is
 * returned with a listen method that responds to store updates for location.
 *
 * When this history is provided to the router, this means the location data
 * will flow like this:
 * history.push -> store.dispatch -> enhancedHistory.listen -> router
 * This ensures that when the store state changes due to a replay or other
 * event, the router will be updated appropriately and can transition to the
 * correct router state.
 */

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

/**
 * This middleware captures CALL_HISTORY_METHOD actions to redirect to the
 * provided history object. This will prevent these actions from reaching your
 * reducer or any middleware that comes after this one.
 */

/**
 * This reducer will update the state with the most recent location history
 * has transitioned to. This may not be in sync with the router, particularly
 * if you have asynchronously-loaded routes, so reading from and relying on
 * this state is discouraged.
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Type Guards
 */

/**
 * Unsubscribe to UI events.
 * @method unsubscribe
 * @param {String} type - The type of event.
 * @param {Function} cb - The callback function.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

/**
 * Whether to convert `#` in plural rule options
 * to `{var, number}`
 * @param el AST Element
 * @param pluralStack current plural stack
 */

/**
 * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
 */

/** @class */

/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** Built-in value references. */

/** Detect free variable `exports`. */

/** Detect free variable `global` from Node.js. */

/** Detect free variable `self`. */

/** Error message constants. */

/** Used as references for various `Number` constants. */

/** Used as the size to enable large array optimizations. */

/** Used for built-in method references. */

/** Used to check objects for own properties. */

/** Used to compose bitmasks for cloning. */

/** Used to convert symbols to primitives and strings. */

/** Used to detect hot functions by number of calls within a span of milliseconds. */

/** Used to detect methods masquerading as native. */

/** Used to detect overreaching core-js shims. */

/** Used to detect unsigned integer values. */

/** Used to match `RegExp` flags from their coerced string values. */

/** Used to resolve the decompiled source of functions. */

/** Used to stand-in for `undefined` hash values. */

/** `Object#toString` result references. */

/************************************************************************/

/******/

/***/

//

// 

//    

//         nextStatus = ENTERING

//         nextStatus = EXITING

//       if (status !== ENTERING && status !== ENTERED) {

//       if (status === ENTERING || status === ENTERED) {

//       }

//     const { status } = this.state

//     if (this.props.in) {

//     }

//     } else {

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    new function as the true mapToProps for subsequent calls.

//    the developer that their mapToProps function is not returning a valid result.

//   if (prevProps !== this.props) {

//   let nextStatus = null

//   return { nextStatus }

//   }

//  * Detects whether the mapToProps function being called depends on props, which

//  * On first call, handles mapToProps if returns another function, and treats that

//  * On first call, verifies the first result is a plain object, in order to warn

// "top" and "bottom" are the positions that this.state.top and this.state.bottom project

// #1

// #2

// -- MessageFormat --------------------------------------------------------

// -- Utilities ----------------------------------------------------------------

// ... unless we just caused that location change

// .000* case (before ICU67 it was .000+)

// 1, 2, 3, 4: The ISO8601 varios formats

// 1, 2, 3, 4: time zone ID or city

// 1, 4: generic non-location format

// 1, 4: miliseconds in day short, long

// 1. Expected ReactClass methods (in the "interface").

// 1. Reset Sticky to the original postion when "top" <= topBoundary

// 1. it's top will stick to the screen top,

// 1..3, 4, 5: The ISO8601 varios formats

// 1..3, 4: specific non-location format

// 2. Overridden methods (that were mixed in).

// 2. Release Sticky to the bottom boundary when "bottom" >= bottomBoundary

// 2. it's bottom will stick to the screen bottom,

// 3. if not the cases above, then it's height gets changed

// ==== Advanced methods ====

// ==== Definition methods ====

// ==== Delegate methods ====

// @@@ case

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// @see https://github.com/webpack-contrib/style-loader/issues/177

// A bottom offset from viewport top where Sticky sticks to when scrolling down

// A child route matched! Augment the match and pass it up the stack.

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// A top offset from viewport top where Sticky sticks to when scrolling up

// AM, PM

// Adapted from convert-source-map (MIT)

// Add a flag to suppress these warnings for this special case.

// Add default formatting options if hour, minute, or second isn't defined.

// Add methods to `Hash`.

// Add methods to `ListCache`.

// Add methods to `MapCache`.

// Add methods to `Stack`.

// Add properties assigned by `RegExp#exec`.

// Alias for path

// Alias methods names because people roll like that.

// All other serializable types (string, number, boolean)

// Allow `EventEmitter` to be imported as module namespace.

// Always be sure we have a properly-encoded hash.

// Any reducers that existed in both the new and old rootReducer

// Are we being called for the first time?

// Assume hook executes synchronously and

// Assume the hook runs synchronously and automatically

// Async match

// Avoid failures from read-only properties

// Binding "this" is important for shallow renderer support.

// Build a destructive iterator for the value list

// By assumption, pattern is non-empty here, which is the prerequisite for

// By explicitly using `prop-types` you are opting into new production behavior.

// By handling mixins before any other properties, we ensure the same

// CONCATENATED MODULE: ./examples/index.js

// CONCATENATED MODULE: ./index.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/@formatjs/intl-utils/lib/invariant.js

// CONCATENATED MODULE: ./node_modules/@restart/hooks/esm/useCommittedRef.js

// CONCATENATED MODULE: ./node_modules/@restart/hooks/esm/useEventCallback.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/addEventListener.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/camelize.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/canUseDOM.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/css.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/getComputedStyle.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/hyphenate.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/hyphenateStyle.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/isTransform.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/listen.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/ownerDocument.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/ownerWindow.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/removeEventListener.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/transitionEnd.js

// CONCATENATED MODULE: ./node_modules/intl-format-cache/lib/index.js

// CONCATENATED MODULE: ./node_modules/intl-messageformat-parser/lib/index.js

// CONCATENATED MODULE: ./node_modules/intl-messageformat-parser/lib/normalize.js

// CONCATENATED MODULE: ./node_modules/intl-messageformat-parser/lib/parser.js

// CONCATENATED MODULE: ./node_modules/intl-messageformat-parser/lib/types.js

// CONCATENATED MODULE: ./node_modules/intl-messageformat/lib/core.js

// CONCATENATED MODULE: ./node_modules/intl-messageformat/lib/error.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/Alert.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/CloseButton.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/Fade.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/SafeAnchor.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/createChainedFunction.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/createWithBsPrefix.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/divWithClassName.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/triggerBrowserReflow.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/components/injectIntl.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/components/message.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/components/provider.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/error.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/formatters/dateTime.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/formatters/displayName.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/formatters/message.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/formatters/number.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/formatters/plural.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/formatters/relativeTime.js

// CONCATENATED MODULE: ./node_modules/react-intl/lib/utils.js

// CONCATENATED MODULE: ./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/connectAdvanced.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/verifySubselectors.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js

// CONCATENATED MODULE: ./node_modules/react-router/es/AsyncUtils.js

// CONCATENATED MODULE: ./node_modules/react-router/es/ContextUtils.js

// CONCATENATED MODULE: ./node_modules/react-router/es/InternalPropTypes.js

// CONCATENATED MODULE: ./node_modules/react-router/es/PatternUtils.js

// CONCATENATED MODULE: ./node_modules/react-router/es/PromiseUtils.js

// CONCATENATED MODULE: ./node_modules/react-router/es/Redirect.js

// CONCATENATED MODULE: ./node_modules/react-router/es/RouteUtils.js

// CONCATENATED MODULE: ./node_modules/react-router/es/Router.js

// CONCATENATED MODULE: ./node_modules/react-router/es/RouterContext.js

// CONCATENATED MODULE: ./node_modules/react-router/es/TransitionUtils.js

// CONCATENATED MODULE: ./node_modules/react-router/es/applyRouterMiddleware.js

// CONCATENATED MODULE: ./node_modules/react-router/es/browserHistory.js

// CONCATENATED MODULE: ./node_modules/react-router/es/computeChangedRoutes.js

// CONCATENATED MODULE: ./node_modules/react-router/es/createTransitionManager.js

// CONCATENATED MODULE: ./node_modules/react-router/es/getComponents.js

// CONCATENATED MODULE: ./node_modules/react-router/es/getRouteParams.js

// CONCATENATED MODULE: ./node_modules/react-router/es/isActive.js

// CONCATENATED MODULE: ./node_modules/react-router/es/match.js

// CONCATENATED MODULE: ./node_modules/react-router/es/matchRoutes.js

// CONCATENATED MODULE: ./node_modules/react-router/es/useRouterHistory.js

// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/config.js

// CONCATENATED MODULE: ./node_modules/redux-thunk/es/index.js

// CONCATENATED MODULE: ./node_modules/redux/es/redux.js

// CONCATENATED MODULE: ./node_modules/subscribe-ui-event/dist-es/constants.js

// CONCATENATED MODULE: ./node_modules/subscribe-ui-event/dist-es/globalVars.js

// CONCATENATED MODULE: ./node_modules/subscribe-ui-event/dist-es/lib/leIE8.js

// CONCATENATED MODULE: ./node_modules/subscribe-ui-event/dist-es/subscribe.js

// CONCATENATED MODULE: ./node_modules/subscribe-ui-event/dist-es/unsubscribe.js

// CONCATENATED MODULE: ./node_modules/subscribe-ui-event/index.es.js

// CONCATENATED MODULE: ./node_modules/uncontrollable/esm/hook.js

// CONCATENATED MODULE: ./node_modules/uncontrollable/esm/index.js

// CONCATENATED MODULE: ./src/action-creators/actions.js

// CONCATENATED MODULE: ./src/actions.js

// CONCATENATED MODULE: ./src/factory/route/route-factory.js

// CONCATENATED MODULE: ./src/factory/store/store-factory.js

// CONCATENATED MODULE: ./src/helpers/fetch-helper.js

// CONCATENATED MODULE: ./src/helpers/index.js

// CONCATENATED MODULE: ./src/react-redux-example-provider.js

// CONCATENATED MODULE: ./src/reducers/all-data-fetched.js

// CONCATENATED MODULE: ./src/reducers/fetch-status/alert-factory.js

// CONCATENATED MODULE: ./src/reducers/fetch-status/index.js

// CONCATENATED MODULE: ./src/reducers/fetch-status/service-data/index.js

// CONCATENATED MODULE: ./src/reducers/fetch-status/service-data/service-data.js

// CONCATENATED MODULE: ./src/reducers/filter.js

// CONCATENATED MODULE: ./src/reducers/index.js

// CONCATENATED MODULE: ./src/reducers/last-fetched-page.js

// CONCATENATED MODULE: ./src/reducers/pizzas.js

// CONCATENATED MODULE: ./src/reducers/routing.js

// CONCATENATED MODULE: ./src/reducers/selected-rows.js

// CONCATENATED MODULE: ./src/reducers/sort-order.js

// CONCATENATED MODULE: ./src/reducers/users.js

// CONCATENATED MODULE: ./src/views/app-provider.js

// CONCATENATED MODULE: ./src/views/common/alert/alert.js

// CONCATENATED MODULE: ./src/views/common/alert/index.js

// CONCATENATED MODULE: ./src/views/common/button-connector.js

// CONCATENATED MODULE: ./src/views/common/button.js

// CONCATENATED MODULE: ./src/views/common/checkbox/checkbox.js

// CONCATENATED MODULE: ./src/views/common/checkbox/index.js

// CONCATENATED MODULE: ./src/views/common/column.js

// CONCATENATED MODULE: ./src/views/common/container.js

// CONCATENATED MODULE: ./src/views/common/data-table-connector.js

// CONCATENATED MODULE: ./src/views/common/data-table.js

// CONCATENATED MODULE: ./src/views/common/filter/filter.js

// CONCATENATED MODULE: ./src/views/common/filter/index.js

// CONCATENATED MODULE: ./src/views/common/header.js

// CONCATENATED MODULE: ./src/views/common/headers.js

// CONCATENATED MODULE: ./src/views/common/loader/full-page-loader.js

// CONCATENATED MODULE: ./src/views/common/loader/index.js

// CONCATENATED MODULE: ./src/views/common/nullify.js

// CONCATENATED MODULE: ./src/views/common/row.js

// CONCATENATED MODULE: ./src/views/common/sort/Sort.js

// CONCATENATED MODULE: ./src/views/common/sort/icon-unsorted.js

// CONCATENATED MODULE: ./src/views/common/sort/index.js

// CONCATENATED MODULE: ./src/views/common/tabs/tabs.js

// CONCATENATED MODULE: ./src/views/notification-connector.js

// CONCATENATED MODULE: ./src/views/notifications.js

// CONCATENATED MODULE: ./src/views/pizzas/index.js

// CONCATENATED MODULE: ./src/views/users/index.js

// Cache some state here so we don't have to

// Call loadMore after detachScrollListener to allow for non-async loadMore functions

// Call this.constructor.gDSFP to support sub-classes.

// Caveat: the context value is expected to never change its identity.

// Change action to POP

// Check for circular references and return its corresponding clone.

// Check if module is in cache

// Check the child routes to see if any of them match.

// Clear queue here to prevent

// Commentting out "break" is on purpose, because there is a chance to transit to FIXED

// Component classes may have a static create* method.

// Connect to control ordering of notifications to flow top-down.

// Continue from where we left off.

// Copy of last location.

// Create a new module (and put it into the cache)

// Create an object with no prototype

// Creates a new object with the specified `formats` merged with the default

// DCE check should happen before ReactDOM bundle executes so that

// DONE (success or failure)

// Default format options used as the prototype of the `formats` provided to the

// Defined first because it's used to build the format pattern.

// Detect buggy property enumeration order in older V8 versions.

// DevTools can report bad minification during injection.

// DevTools shouldn't crash React, no matter what.

// Disallow defining methods more than once unless explicitly allowed.

// Disallow overriding of base class methods unless explicitly allowed.

// Don't create new children; use the grandchildren.

// Don't update location

// ESM COMPAT FLAG

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@restart/context/forwardRef.js

// EXTERNAL MODULE: ./node_modules/create-react-class/index.js

// EXTERNAL MODULE: ./node_modules/history/lib/createHashHistory.js

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: ./node_modules/lodash/assign.js

// EXTERNAL MODULE: ./node_modules/lodash/clone.js

// EXTERNAL MODULE: ./node_modules/prop-types/index.js

// EXTERNAL MODULE: ./node_modules/react-stickynode/index.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/shallow-equal/objects/index.js

// EXTERNAL MODULE: ./node_modules/symbol-observable/es/index.js

// EXTERNAL MODULE: ./src/styles/style.scss

// Either a) this route matched at least some of the path or b)

// Either this is the first call, activity has stopped and we're at the

// Enforce that all required values are provided by the caller.

// Ensure pattern starts with leading slash for consistency with pathname.

// Ensure that the reducer is mounted on the store and functioning properly.

// Ensure the hash is encoded properly.

// Era

// Execute the module function

// Exit early for string parts.

// Exports

// Expose the prefix.

// FIXME: This doesn't work on repeated params.

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

// Firefox (pre 40) decodes `%3D` to `=`

// Flag the module as loaded

// For browser less then and equal to IE8, event object need to be cloned for setTimeout.

// For debugging

// For methods which are defined more than once, call the existing

// For old IE

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// Generated by CoffeeScript 1.12.2

// Go down the options and search for # in any literal element

// HTTP methods whose capitalization should be normalized

// Hack to grab NoopUpdateQueue from isomorphic React

// Handle invocations in a tight loop.

// Here we make sure the element is visible as well as checking the offset

// History 2.x listeners expect a synchronous call. Make the first call to the

// History 3.x doesn't call listen synchronously, so fire the initial location change ourselves

// Hot path for straight simple msg translations

// Hour

// IE 10-11 can't handle a DataView body.

// IE 11 sometimes throws when accessing window.history.state

// If "top" and "bottom" are inbetween stickyTop and stickyBottom, then Sticky is in

// If `Object.create(null)` is not supported we prefix the event names with a

// If pure is true, the selector returned by selectorFactory will memoize its results,

// If target prop is set (e.g. to "_blank"), let browser handle link.

// If the store is replayed, update the URL in the browser to match.

// If there is a remaining pathname, treat the path separator as part of

// If this component received store from props, its subscription should be transparent

// If user does not specify a `to` prop, return an empty anchor tag.

// If we're encountering a plural el

// Ignore extraneous hashchange events

// Ignore if rendered outside the context of router to simplify unit testing.

// Ignore invalid JSON.

// Important!

// In regular cases, when Sticky is in FIXED status,

// In the context of a TransitionGroup all enters are really appears

// In this case, Sticky is higher then viewport minus top offset

// In this case, Sticky is shorter then viewport minus top offset

// Init initialLocation with potential location in store

// Initialize the defaultProps property after all mixins have been merged.

// Invoke the leading edge.

// It also provides a way to destroy internal listeners

// Iterate instead of recursing if possible.

// Keep the identity of this.router because of a caveat in ContextUtils:

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Keep track of whether we unsubscribed, as Redux store

// Legacy `process.binding('util')` for Node.js < 10.

// Let user unsubscribe later

// Load entry module and return exports

// Might be undefined.

// Minute

// Module

// Month

// Name the function so it is clearer in the documentation

// No Sticky on lower-end browser when no Modernizr

// No need to immediately call listener here.

// No operation performed.

// No throttle for throttleRate = 0

// Node.js 0.10 has enumerable non-index properties on buffers.

// Normalize leading slash for consistency. Leading slash on pathname has

// Normalize the end of both path names too. Maybe `/foo/` shouldn't show

// Not the same object, but same type.

// Nothing to do

// Object.prototype.hasOwnProperty.call

// Only forward non-Router-specific props to routing context, as those are

// Only initialize the globals if this is the first

// Only invoke if we have `lastArgs` which means `func` has been

// Only try to match the path if the route actually has a pattern, and if

// Otherwise, unsubscription would never take place during SSR, causing a memory leak.

// PRIVATE: For client-side rehydration of server match.

// Parse string messages into an AST.

// Pass through the key as a prop to createElement to allow

// Passing no args indicates to the user that this is a

// Passing the location arg here indicates to

// Period

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// Picking up on a matchContext.

// Precision

// Prevent delta from being 0

// Prevents Chrome hangups

// Quarter

// RELEASE status. Otherwise, it changes to FIXED status, and its bottom sticks to

// React may warn about cWM/cWRP/cWU methods being deprecated.

// React v16.11 and below

// React v16.12 and above

// ReactClasses doesn't have constructors. Instead, they use the

// Real y-axis offset for rendering position-fixed and position-relative

// Recursively format plural and select parts' option — which can be a

// Recursively populate clone (susceptible to call stack limits).

// Reduce time spent doing lookups by setting these on the prototype.

// Remember as a fallback in case state is reset

// Remember where we are

// Replace `#` in plural rules with the actual numeric value.

// Require that the match ends at a path separator, if we didn't match

// Reset any `maxWait` timer.

// Reset the array, or remove it completely if we have no more listeners.

// Restart the timer.

// Restore the URL

// Return that as the export for use in Webpack, Browserify etc.

// Return the exports of the module

// Safari 9 has enumerable `arguments.length` in strict mode.

// Scroll doesn't need to be handled

// Scroll position hasn't changed,

// Second

// See https://github.com/ReactTraining/history/pull/289

// See: https://stackoverflow.com/questions/47524205/random-high-content-download-time-in-chrome/47684257#47684257

// Set a defaut loader for all your `InfiniteScroll` components

// Set as a number for setTimeout later.

// Set up the history listener first in case the initial match redirects.

// Setup methods on prototype:

// Signature should be (location, indexOnly), but needs to support (path,

// Since rollup cannot deal with namespace being a function,

// Since there's no registered locale data for `locale`, this will

// Skip index properties.

// Some versions of FF have rAF but not cAF

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// Sort object keys, not values

// Special case to return head of iframe instead of iframe itself

// Special-case patterns like '*' for catch-all routes.

// Start the timer for the trailing edge.

// Sticky height

// Sticky width

// Synchronously check to see if any route hooks want

// TODO(skeleton): add skeleton support

// TODO, "overflow: auto" prevents collapse, need a good way to get children height

// TODO, bottomBoundary was an object, depricate it later.

// TODO, may remove

// TODO, topTarget is for current layout, may remove

// TODO: Add more comments

// TODO: De-duplicate against hasAnyProperties in createTransitionManager.

// TODO: Fetch components after state is updated.

// TODO: Make match a pure function and have some other API

// TODO: Only use a single history listener. Otherwise we'll end up with

// TODO: This is a bit ugly. It keeps around support for treating pathnames

// TODO: This is a little bit ugly, but it works around a quirk in history

// TODO: We didn't actually match anything, but hang

// TODO: We should provide initial value here

// TODO: remove fallback for next major

// TODO: should this part be literal type?

// Tear down confirmation hooks for left routes

// Tell the store to update by dispatching an action

// Test for A's keys different from B.

// Test for IE <= 9 as proposed by Browserhacks

// Tests for existence of standard globals is to allow style-loader

// The Sticky status

// The `messages` are overridden to the `defaultProps` empty object

// The bottom boundary on document

// The enhanced history uses store as source of truth

// The following member methods should not be automatically bound:

// The listeners are subscribed to the store instead of history

// The module cache

// The original x of Sticky

// The original y of Sticky

// The require function

// The top boundary on document

// The use of `Object#toString` avoids issues with the `typeof` operator

// There are 2 principles to make sure Sticky won't get wrong so much:

// These cases should already be caught by validateMethodOverride.

// This action has a similiar effect to ActionTypes.INIT.

// This case only happens when Sticky's bottom sticks to the screen bottom and

// This error probably occurred in getChildRoutes or getComponents.

// This hack is needed because the `__proto__` property is still inherited in

// This is used to make sure we don't warn about the same

// This means the loop finished synchronously.

// This prevents warnings from littering the console in development

// This shouldn't be necessary, but there are weird race conditions with

// This will throw an exception if access to iframe is blocked

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// This works in non-strict mode

// Throw errors by default so we don't silently swallow them!

// To handle the case where a child component may have triggered a state change by

// To keep our warnings more understandable, we'll use a little hack here to

// Transition was interrupted during confirmation

// Treat PUSH to same path like REPLACE to be consistent with browsers

// Unified NumberFormat (Stage 3 as of 10/22/19)

// Update address bar to reflect store state

// Use `util.types` for Node.js 10+.

// Use the setState() updater to ensure state isn't stale in certain edge cases.

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// Verify that the code above has been dead code eliminated (DCE'd).

// We can't use window.location.hash here because it's not

// We don't expect any of the above to throw, but better to be safe.

// We have an exact match on the route. Just check that all the params

// We return undefined, instead of nothing here, so it's

// We should still report in case we break this code.

// We try to not inherit from `Object.prototype`. In some engines creating an

// Week

// Weekday

// When a store is created, an "INIT" action is dispatched so that every

// When value supplied is invalid

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// When we have a placeholder but no value to format

// When we need specific Intl API but it's not available

// Whenever location changes, dispatch an action to get it in the store

// Wire up auto-binding

// Works around issues with context updates failing to propagate.

// Wrap in a new function to prevent

// Year

// Zone

// __webpack_public_path__

// `/foo` as active, but in this case, we would already have failed the

// `cancel` potentially being assigned

// `componentDidUpdate` is conditionally implemented when `onStateChange` determines it

// `id` is a required field of a Message Descriptor.

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// a boolean check every time avoids an extra method call most of the time, resulting

// a bottomBoundary can be provided to avoid reading from the props

// a top argument can be provided to override reading from the props

// a.action === b.action && // Different action !== location change.

// abstracted-by and delegated-to the part helper object.

// actually terminating a match.

// again in the listen callback.

// alias for children

// allow detectFactoryAndVerify to get ownProps

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// allows for nested Transitions

// already been normalized in isActive. See caveat there.

// always use translate3d to enhance the performance

// am, pm, noon, midnight

// and Intl.DateTimeFormat instances.

// and will always fix to the top offset of viewport

// around the same quirks with basenames as in matchRoutes.

// automatically call the callback.

// beforeunload hook. We don't know the next location.

// bind the listeners regardless if initially enabled - allows the component to toggle sticky functionality

// break;

// cached from whatever global is present so that test runners that stub it

// call the callback with the return value.

// callbacks from appending listeners

// case 1, and scrolling down

// case 2, and scrolling up

// case 3

// chaining order is applied to methods with DEFINE_MANY policy, whether

// change and enter hooks are run in series

// changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does

// character to make sure that the built-in object properties are not

// componentWillMount fires during server side rendering, but componentDidMount and

// componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.

// connected to the store via props shouldn't use subscription from context, or vice versa.

// consistent across browsers - Firefox will pre-decode it!

// constants

// constructor. These are used when constructing the internal Intl.NumberFormat

// create a fake namespace object

// createConnect with default args builds the 'official' connect behavior. Calling it with

// css base code, injected by the css-loader

// custom createElement functions to know which named component

// debounced at least once.

// default locale.

// define __esModule on exports

// define getter function for harmony exports

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// different options opens up some testing and extensibility scenarios

// dispatching an action in its componentWillMount, we have to re-run the select and maybe

// do nothing

// does not export a default

// don't break things.  But we need to wrap it in a try catch in case it is

// don't hoist over string (html) components

// due to cross-origin restrictions

// each <FormattedMessage> contains a `defaultMessage` prop.

// easier to handle this case. if(!global) { ...}

// either case continue checking for matches in the subtree.

// empty string to avoid regexp issues

// end

// ensure that Constructor.name !== 'Constructor'. This makes sure we don't

// eslint-disable-line

// eslint-disable-line import/no-mutable-exports

// eslint-disable-line no-empty

// eslint-disable-line no-new-wrappers

// eslint-disable-line no-unused-expressions

// eslint-disable-line prefer-const

// eslint-disable-line prefer-rest-params

// eslint-disable-next-line func-names

// eslint-disable-next-line no-multi-assign

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line prefer-destructuring

// eslint-disable-next-line react/prop-types

// expose the module cache

// expose the modules object (__webpack_modules__)

// extra null check every change can be avoided by copying the method onto `this` and then

// fallback to the `defaultLocale` to make sure things can render.

// flexible day periods

// for "match and update state".

// for...of would work here but it's probably slower post-transpilation.

// formats.

// from ORIGINAL when calling window.scrollTo().

// function because try/catches deoptimize in certain engines.

// g can still be undefined, but nothing to do about it...

// getDefaultExport function for compatibility with non-harmony modules

// getInitialState and componentWillMount methods for initialization.

// getSnapshotBeforeUpdate(prevProps) {

// http://fb.me/prop-types-in-prod

// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://github.com/facebook/react/issues/2517

// https://github.com/reactjs/react-router/issues/470

// https://github.com/rollup/rollup/issues/1267

// https://github.com/sindresorhus/query-string/issues/47

// https://github.com/sindresorhus/query-string/pull/37

// https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision

// https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h

// if clearTimeout wasn't available but was latter defined

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// if setTimeout wasn't available but was latter defined

// if the props for enabling are toggled, then trigger the update or reset depending on the current props

// if we are mounting and running this it means appear _must_ be set

// ignore

// import a list of modules into the list

// in Safari 9 which returns 'object' for typed arrays and other constructors.

// in some perf boost.

// instance in this way is faster than calling `Object.create(null)` directly.

// instance, preventing the instance from being garbage collected, and that would be bad

// instance. a singleton memoized selector would then be holding a reference to the

// istanbul ignore if

// istanbul ignore next

// it as the trailing edge, or we've hit the `maxWait` limit.

// its height gets changed. Sticky should be in RELEASE status and update its

// jump to ending paren

// keys multiple times.

// less then or equal to IE8

// listener after subscribing to the store, in case the listener causes a

// listeners logic is changed to not call listeners that have been unsubscribed in the

// location change (e.g. when it redirects)

// main

// make a shallow copy so that fields added don't leak to the original selector.

// match.

// matchRoutes() again in the listen callback.

// methods before calling the new property, merging if appropriate.

// middle of the notification loop.

// missing `=` should be `null`:

// mixins are listed before or after these methods in the spec.

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// module.parent = undefined by default

// multiple concurrent calls to match.

// needs to notify nested subs. Once called, it unimplements itself until further state

// nested pattern structure. The choosing of the option to use is

// nextStatus will always be ENTERING or EXITING.

// no enter animation skip right to ENTERED

// no exit animation skip right to EXITED

// object and shouldComponentUpdate will always return true.

// on document from viewport.

// on the global object (window or self)

// onLeave hooks start at the leaf route.

// once those variables enabled, then never disabled.

// only applies changes in subscriptions on next dispatch

// onto error/nextState so we don't have to matchRoutes

// options object:

// otherwise, the cursor incorrectly styled (except with role='button')

// overridden or used as an attack vector.

// parentSub's source should match where store came from: props vs. context. A component

// passed through to selectorFactory

// precision-integer case

// props have not changed. If false, the selector will always return a new

// query, indexOnly)

// re-render.

// reading a dimension prop will cause the browser to recalculate,

// reducer returns their initial state. This effectively populates

// remove the remover from removers array

// replacing it with a no-op on unmount. This can probably be avoided if Subscription's

// return the list of modules as css string

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// setState callbacks and unmounting in testing, so always make sure that

// setup transition & beforeunload hooks

// shim for using process in browser

// should be strict equal.

// some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.

// start

// sticky bottom by calculating how much height it changed.

// subscription passed to it. Otherwise, it shadows the parent subscription, which allows

// tags it will allow on a page

// teardown transition & beforeunload hooks

// that strips the leading slash from pathnames when using basenames with

// the full path, so any remaining pathname is a new path segment.

// the initial state tree.

// the middle of the notification loop, where `this.subscription` will then be null. An

// the new state tree with any relevant data from the old one.

// the only ones that might be custom routing context props.

// the remaining pathname for properly continuing the match.

// the user that this is a transition hook.

// the whatwg-fetch polyfill installs the fetch() function

// therefore not reporting its length accurately..

// they only work if the object identity is preserved.

// they're rendering, for e.g. matching up to fetched data.

// this function wraps mapToProps in a proxy function which does several things:

// this is especially important for 'ref' since that's a reference back to the component

// this is to interop with TypeScript since `invariant`

// time this component type has been mounted

// to any descendants receiving store+subscription from context; it passes along

// to maintain referential equality across re-renders. It's assumed

// to operate correctly into non-standard environments

// to prevent the current window/tab from closing.

// to the current frame's queue

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// to the native rAF function

// trailing edge, the system time has gone backwards and we're treating

// trailing slashes.

// tslint:disable:align

// tslint:disable:max-line-length

// tslint:disable:no-consecutive-blank-lines

// tslint:disable:object-literal-shorthand

// tslint:disable:object-literal-sort-keys

// tslint:disable:one-variable-per-declaration

// tslint:disable:only-arrow-functions

// tslint:disable:trailing-comma

// turn off throttle if the browser is IE8 or less, because window.event will be reset

// unnecessarily identify a class without displayName as 'Constructor'.

// used in error messages

// used to compute Connect's displayName from the wrapped component's displayName.

// v8 likes predictible objects

// viewport bottom when scrolling down, or its top sticks to viewport top when scrolling up.

// we can cancel any pending setState callbacks after we unmount.

// we don't care about invariant's own frame

// we don't have to load this route's children asynchronously. In

// we want to make sure there is a href attribute on the node

// we're not just searching for potential nested absolute paths.

// webpackBootstrap

// when mount, the scrollTop is not necessary on the top

// when no `messages` are passed into the <IntlProvider> for the

// when using any delayed function, i.g., setTimeout, or rAF.

// when when somebody has screwed with setTimeout but no I.E. maddness

// whether mapToProps needs to be invoked when props have changed.

// which will let our animations work

// will receive the previous state. This effectively populates

// without preceding slashes as absolute paths, but possibly also works

// wrap the selector in an object that tracks its results between runs.

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// }

//# sourceMappingURL=dateTime.js.map

//# sourceMappingURL=displayName.js.map

//# sourceMappingURL=error.js.map

//# sourceMappingURL=formatters.js.map

//# sourceMappingURL=index.js.map

//# sourceMappingURL=injectIntl.js.map

//# sourceMappingURL=invariant.js.map

//# sourceMappingURL=list.js.map

//# sourceMappingURL=message.js.map

//# sourceMappingURL=normalize.js.map

//# sourceMappingURL=number.js.map

//# sourceMappingURL=parser.js.map

//# sourceMappingURL=performance-now.js.map

//# sourceMappingURL=plural.js.map

//# sourceMappingURL=relativeTime.js.map

//# sourceMappingURL=skeleton.js.map

//# sourceMappingURL=types.js.map

//# sourceMappingURL=utils.js.map

//normal enviroments in sane situations
